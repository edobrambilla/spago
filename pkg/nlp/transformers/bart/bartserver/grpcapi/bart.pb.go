// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: bart.proto

package grpcapi

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The classify request message containing the text to classify
type ClassifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasText2 bool   `protobuf:"varint,1,opt,name=has_text2,json=hasText2,proto3" json:"has_text2,omitempty"` // always set this to "true" when using text2
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Text2    string `protobuf:"bytes,3,opt,name=text2,proto3" json:"text2,omitempty"`
}

func (x *ClassifyRequest) Reset() {
	*x = ClassifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifyRequest) ProtoMessage() {}

func (x *ClassifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifyRequest.ProtoReflect.Descriptor instead.
func (*ClassifyRequest) Descriptor() ([]byte, []int) {
	return file_bart_proto_rawDescGZIP(), []int{0}
}

func (x *ClassifyRequest) GetHasText2() bool {
	if x != nil {
		return x.HasText2
	}
	return false
}

func (x *ClassifyRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ClassifyRequest) GetText2() string {
	if x != nil {
		return x.Text2
	}
	return ""
}

// The classify-nli request message containing the text to classify using natural language inference
type ClassifyNLIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	HypothesisTemplate string   `protobuf:"bytes,2,opt,name=hypothesis_template,json=hypothesisTemplate,proto3" json:"hypothesis_template,omitempty"`
	PossibleLabels     []string `protobuf:"bytes,3,rep,name=possible_labels,json=possibleLabels,proto3" json:"possible_labels,omitempty"`
	MultiClass         bool     `protobuf:"varint,4,opt,name=multi_class,json=multiClass,proto3" json:"multi_class,omitempty"`
}

func (x *ClassifyNLIRequest) Reset() {
	*x = ClassifyNLIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifyNLIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifyNLIRequest) ProtoMessage() {}

func (x *ClassifyNLIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifyNLIRequest.ProtoReflect.Descriptor instead.
func (*ClassifyNLIRequest) Descriptor() ([]byte, []int) {
	return file_bart_proto_rawDescGZIP(), []int{1}
}

func (x *ClassifyNLIRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ClassifyNLIRequest) GetHypothesisTemplate() string {
	if x != nil {
		return x.HypothesisTemplate
	}
	return ""
}

func (x *ClassifyNLIRequest) GetPossibleLabels() []string {
	if x != nil {
		return x.PossibleLabels
	}
	return nil
}

func (x *ClassifyNLIRequest) GetMultiClass() bool {
	if x != nil {
		return x.MultiClass
	}
	return false
}

// The pair of class and confidence.
type ClassConfidencePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class      string  `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	Confidence float64 `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *ClassConfidencePair) Reset() {
	*x = ClassConfidencePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassConfidencePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassConfidencePair) ProtoMessage() {}

func (x *ClassConfidencePair) ProtoReflect() protoreflect.Message {
	mi := &file_bart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassConfidencePair.ProtoReflect.Descriptor instead.
func (*ClassConfidencePair) Descriptor() ([]byte, []int) {
	return file_bart_proto_rawDescGZIP(), []int{2}
}

func (x *ClassConfidencePair) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ClassConfidencePair) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// The response message containing the classification.
type ClassifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class        string                 `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	Confidence   float64                `protobuf:"fixed64,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Distribution []*ClassConfidencePair `protobuf:"bytes,3,rep,name=distribution,proto3" json:"distribution,omitempty"`
	// Took is the number of milliseconds it took the server to execute the request.
	Took int64 `protobuf:"varint,4,opt,name=took,proto3" json:"took,omitempty"`
}

func (x *ClassifyReply) Reset() {
	*x = ClassifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bart_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifyReply) ProtoMessage() {}

func (x *ClassifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_bart_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifyReply.ProtoReflect.Descriptor instead.
func (*ClassifyReply) Descriptor() ([]byte, []int) {
	return file_bart_proto_rawDescGZIP(), []int{3}
}

func (x *ClassifyReply) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ClassifyReply) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *ClassifyReply) GetDistribution() []*ClassConfidencePair {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *ClassifyReply) GetTook() int64 {
	if x != nil {
		return x.Took
	}
	return 0
}

var File_bart_proto protoreflect.FileDescriptor

var file_bart_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x61,
	0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x65, 0x78, 0x74, 0x32, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x4e, 0x4c, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x79,
	0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6b, 0x32, 0xa0, 0x01, 0x0a, 0x04, 0x42,
	0x41, 0x52, 0x54, 0x12, 0x48, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12,
	0x1d, 0x2e, 0x62, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x4c, 0x49, 0x12, 0x20, 0x2e, 0x62,
	0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x4e, 0x4c, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x3f, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x70, 0x6f,
	0x64, 0x79, 0x73, 0x73, 0x65, 0x79, 0x2f, 0x73, 0x70, 0x61, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x6e, 0x6c, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x62, 0x61, 0x72, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bart_proto_rawDescOnce sync.Once
	file_bart_proto_rawDescData = file_bart_proto_rawDesc
)

func file_bart_proto_rawDescGZIP() []byte {
	file_bart_proto_rawDescOnce.Do(func() {
		file_bart_proto_rawDescData = protoimpl.X.CompressGZIP(file_bart_proto_rawDescData)
	})
	return file_bart_proto_rawDescData
}

var file_bart_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bart_proto_goTypes = []interface{}{
	(*ClassifyRequest)(nil),     // 0: bart.grpcapi.ClassifyRequest
	(*ClassifyNLIRequest)(nil),  // 1: bart.grpcapi.ClassifyNLIRequest
	(*ClassConfidencePair)(nil), // 2: bart.grpcapi.ClassConfidencePair
	(*ClassifyReply)(nil),       // 3: bart.grpcapi.ClassifyReply
}
var file_bart_proto_depIdxs = []int32{
	2, // 0: bart.grpcapi.ClassifyReply.distribution:type_name -> bart.grpcapi.ClassConfidencePair
	0, // 1: bart.grpcapi.BART.Classify:input_type -> bart.grpcapi.ClassifyRequest
	1, // 2: bart.grpcapi.BART.ClassifyNLI:input_type -> bart.grpcapi.ClassifyNLIRequest
	3, // 3: bart.grpcapi.BART.Classify:output_type -> bart.grpcapi.ClassifyReply
	3, // 4: bart.grpcapi.BART.ClassifyNLI:output_type -> bart.grpcapi.ClassifyReply
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bart_proto_init() }
func file_bart_proto_init() {
	if File_bart_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bart_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bart_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifyNLIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bart_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassConfidencePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bart_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bart_proto_goTypes,
		DependencyIndexes: file_bart_proto_depIdxs,
		MessageInfos:      file_bart_proto_msgTypes,
	}.Build()
	File_bart_proto = out.File
	file_bart_proto_rawDesc = nil
	file_bart_proto_goTypes = nil
	file_bart_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: sequencelabeler.proto

package grpcapi

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The analyze request message containing the tokens for the sequence labeler analysis.
type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	MergeEntities     bool   `protobuf:"varint,2,opt,name=mergeEntities,proto3" json:"mergeEntities,omitempty"`
	FilterNotEntities bool   `protobuf:"varint,3,opt,name=filterNotEntities,proto3" json:"filterNotEntities,omitempty"`
	// Took is the number of milliseconds it took the server to execute the request.
	Took int64 `protobuf:"varint,4,opt,name=took,proto3" json:"took,omitempty"`
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencelabeler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencelabeler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_sequencelabeler_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnalyzeRequest) GetMergeEntities() bool {
	if x != nil {
		return x.MergeEntities
	}
	return false
}

func (x *AnalyzeRequest) GetFilterNotEntities() bool {
	if x != nil {
		return x.FilterNotEntities
	}
	return false
}

func (x *AnalyzeRequest) GetTook() int64 {
	if x != nil {
		return x.Took
	}
	return 0
}

// The analyze response message containing the text to analyze with options.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Start int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End   int32  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencelabeler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_sequencelabeler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_sequencelabeler_proto_rawDescGZIP(), []int{1}
}

func (x *Token) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Token) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Token) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Token) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type AnalyzeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// Took is the number of milliseconds it took the server to execute the request.
	Took int64 `protobuf:"varint,2,opt,name=took,proto3" json:"took,omitempty"`
}

func (x *AnalyzeReply) Reset() {
	*x = AnalyzeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequencelabeler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeReply) ProtoMessage() {}

func (x *AnalyzeReply) ProtoReflect() protoreflect.Message {
	mi := &file_sequencelabeler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeReply.ProtoReflect.Descriptor instead.
func (*AnalyzeReply) Descriptor() ([]byte, []int) {
	return file_sequencelabeler_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeReply) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *AnalyzeReply) GetTook() int64 {
	if x != nil {
		return x.Took
	}
	return 0
}

var File_sequencelabeler_proto protoreflect.FileDescriptor

var file_sequencelabeler_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69,
	0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6b, 0x22,
	0x59, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x5a, 0x0a, 0x0c, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6b, 0x32, 0x6e, 0x0a, 0x0f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x07, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x70, 0x6f, 0x64, 0x79, 0x73, 0x73, 0x65, 0x79, 0x2f,
	0x73, 0x70, 0x61, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6e, 0x6c, 0x70, 0x2f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sequencelabeler_proto_rawDescOnce sync.Once
	file_sequencelabeler_proto_rawDescData = file_sequencelabeler_proto_rawDesc
)

func file_sequencelabeler_proto_rawDescGZIP() []byte {
	file_sequencelabeler_proto_rawDescOnce.Do(func() {
		file_sequencelabeler_proto_rawDescData = protoimpl.X.CompressGZIP(file_sequencelabeler_proto_rawDescData)
	})
	return file_sequencelabeler_proto_rawDescData
}

var file_sequencelabeler_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sequencelabeler_proto_goTypes = []interface{}{
	(*AnalyzeRequest)(nil), // 0: sequencelabeler.grpcapi.AnalyzeRequest
	(*Token)(nil),          // 1: sequencelabeler.grpcapi.Token
	(*AnalyzeReply)(nil),   // 2: sequencelabeler.grpcapi.AnalyzeReply
}
var file_sequencelabeler_proto_depIdxs = []int32{
	1, // 0: sequencelabeler.grpcapi.AnalyzeReply.tokens:type_name -> sequencelabeler.grpcapi.Token
	0, // 1: sequencelabeler.grpcapi.SequenceLabeler.Analyze:input_type -> sequencelabeler.grpcapi.AnalyzeRequest
	2, // 2: sequencelabeler.grpcapi.SequenceLabeler.Analyze:output_type -> sequencelabeler.grpcapi.AnalyzeReply
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sequencelabeler_proto_init() }
func file_sequencelabeler_proto_init() {
	if File_sequencelabeler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sequencelabeler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencelabeler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequencelabeler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sequencelabeler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sequencelabeler_proto_goTypes,
		DependencyIndexes: file_sequencelabeler_proto_depIdxs,
		MessageInfos:      file_sequencelabeler_proto_msgTypes,
	}.Build()
	File_sequencelabeler_proto = out.File
	file_sequencelabeler_proto_rawDesc = nil
	file_sequencelabeler_proto_goTypes = nil
	file_sequencelabeler_proto_depIdxs = nil
}
